# This document is used to describe the user path.
# It contains the data schema, as well as the endpoints
# It should be changed whenever the returned structure changes as well.
components:
  schemas:
    Intray:
      type: object
      properties:
        intrayId:
          type: string
          description: The auto-generated uuid of the intray item.
          example: '879127udh12f23'
        userId:
          type: string
          description: The uuid of the user who owns the item
          example: 'f1298fh2378f2'
        title:
          type: string
          description: Title of the intray item.
          example: 'Wash the dishes'
        description:
          type: string
          description: A description of the intray item.
          example: 'Clean up the dishes left from yesterday evening'
        created:
          type: date
          description: Moment.js timestamp of when the intray item has been created.
          example: 'Moment<2020-12-21T13:01:42+01:00>'
        changed:
          type: date
          description: Moment.js timestamp of when intray item has been changed last.
          example: 'Moment<2020-12-21T13:01:42+01:00>'
        followup:
          type: date
          description: Moment.js timestamp of when intray item should be reviewed.
          example: 'Moment<2020-12-21T13:01:42+01:00>'
        done:
          type: boolean
          description: Whether the intray item is still valid or not
          example: 'true'

# Intray endpoint
/intray/{userId}:
  get:
    summary: Returns a list of all intray items for a specific user
    operationId: handleGetIntrayByUserId
    tags: [Intray]
    produces:
     - application/json
    responses:
      200:
        description: Returns the collection of intray items as a json array
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Intray'
        # TODO: Add the link to possible followup
        # links:
        #   getUserById:
        #     description: The id - value returned in the response can be used as the id parameter in `GET user/{id}/`
        #     operationId: getUserById
        #     parameters:
        #       userId: $response.body#/id
      404:
        description: Returns an object describing that no items could be returned ( e.g. empty array returned by controller )
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotFoundException'
      500:
        description: Returns an object describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalErrorException'
  post:
    summary: Creates a new user and writes it to the database
    operationId: handleWriteUser
    tags: [Users]
    consumes:
      - application/json
    produces:
    	- application/json
    requestBody:
      description: For posting a user, you do not need to specify the id and createdAt params, they'll be handled by the server. All other fields are, however, mandatory
      required: true,
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    responses:
      201:
        description: Indicates that the user has been created successfully. Created user will be returned.
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Successfully wrote user into database"
                data:
                  $ref: '#/components/schemas/User'
      500:
        description: Bad request. Not all necessary params have been provided
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUnexpectedErrorException'

# User endpoint with id - path param
/user/{id}:
  get:
    summary: Returns a single user identified by its id
    operationId: getUserById
    tags: [Users]
    consumes:
    	- application/json
    produces:
    	- application/json
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Unique ID of the user
    responses:
      200:
        description: Users
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      404:
        description: Returns an object describing the not-found exception that occured
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotFoundException'
  put:
    summary: Updates a single user by its id
    operationId: updateUserById
    tags: [Users]
    consumes:
    	- application/json
    produces:
    	- application/json
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Unique ID of the user
    requestBody:
      description: Updated user data to be saved in the database
      required: true,
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    responses:
      200:
        description: Returns the updated userdata
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      404:
        description: Returns an object describing the not-found exception that occured
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotFoundException'
  delete:
    summary: Deletes a user by its id
    tags: [Users]
    consumes:
    	- application/json
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Unique ID of the user
    responses:
      204:
        description: An empty response indicating that the user has been deleted
      404:
        description: Returns an object describing the not-found exception that occured
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotFoundException'