# This document is used to describe the /project path.
# It contains the data schema, as well as the endpoints
# It should be changed whenever the returned structure changes as well.
components:
  schemas:
    Project:
      type: object
      properties:
        projectId:
          type: string
          description: The auto-generated uuid of the project item.
          example: "879127udh12f23"
        userId:
          type: string
          description: The uuid of the user who owns the item.
          example: "f1298fh2378f2"
        title:
          type: string
          description: Title of the project item.
          example: "Clean up the kitchen"
        description:
          type: string
          description: A description of the project item.
          example: "Clean up the dishes left from yesterday evening"
        created:
          type: date
          description: Moment.js timestamp of when the project item has been created.
          example: "Moment<2020-12-21T13:01:42+01:00>"
        changed:
          type: date
          description: Moment.js timestamp of when project item has been changed last.
          example: "Moment<2020-12-21T13:01:42+01:00>"
        followup:
          type: date
          description: Moment.js timestamp of when project item should be reviewed.
          example: "Moment<2020-12-21T13:01:42+01:00>"
        done:
          type: boolean
          description: Whether the project item is still valid or not.
          example: "true"
tags:
  name: Project
  description: Primary resource. A project is a collection of several tasks, the own ones and the delegated.

# Project endpoint: No params
/api/v1/project:
  post:
    summary: Creates a new project item. The userId property is taken from the user's json webtoken, the timestamps are created automatically
    operationId: handleCreateProject
    tags: [Project]
    consumes:
      - application/json
    produces:
      - application/json
    requestBody:
      description: Creates a new project item. If other parameters from the project model are provided, they will be overwritten
      required: true,
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: Title of the project item.
                example: "Wash the dishes"
              description:
                type: string
                description: A description of the project item.
                example: "Clean up the dishes left from yesterday evening"
              followup:
                type: date
                description: Moment.js timestamp of when project item should be reviewed.
                example: "Moment<2020-12-21T13:01:42+01:00>"
    responses:
      201:
        description: Returns an `object` representing the created project item.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalErrorException"

# Project endpoint: User ID path
api/v1/project/{userId}:
  get:
    summary: Returns a list of all project items for a specific user. userId defaults to the userId extracted from the json webtoken.
    operationId: handleGetProjectByUserId
    tags: [Project]
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: false
        description: Unique ID of the user for which project items should be returned. If it differs from the userId in the json webtoken, it will be overwritten.
      - in: query
        name: q
        schema:
          type: string
        required: false
        description: Query the title and description for a specific substring. If it appears in one of these, it will be part of the returned array.
      - in: query
        name: done
        schema:
          type: boolean
        required: false
        description: If set to true, the response will contain only items marked as done. If set to false, only items marked as pending.
      - in: query
        name: overdue
        schema:
          type: boolean
        required: false
        description: If set to true, the response will contain only project items which have a followup date that's in the past.

    produces:
      - application/json
    responses:
      200:
        description: Returns an `array` of project items for the specified user id
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Project"
      404:
        description: Returns an `object` describing that the project item was not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotFoundException"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalErrorException"

# Project endpoint: Project ID path
/api/v1/project/{projectId}:
  get:
    summary: Returns a single project item by its id
    operationId: handleGetProjectByProjectId
    tags: [Project]
    parameters:
      - in: path
        name: projectId
        schema:
          type: string
        required: true
        description: Unique ID of the project item which should be returned.
    produces:
      - application/json
    responses:
      200:
        description: Returns an `object` representing the called project item
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
        links:
          Get logs for project item:
            description: The projectId - value returned in the response can be used to find related log items in `/log/{actionId}`
            operationId: handleGetLogsByActionId
            parameters:
              projectId: '879127udh12f23'
          Create a new log item:
            description: The projectId - value returned in the response can be used to create a new log item in `/log/{actionId}`
            operationId: handleCreateLogByActionId
            parameters:
              projectId: '879127udh12f23'
      404:
        description: Returns an `object` describing that no project item was found.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotFoundException"
      500:
        description: Returns an `object` describing the unexpected server error that occured.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalErrorException"
  put:
    summary: Update a single project item by its id
    operationId: handleUpdateProjectByProjectId
    tags: [Project]
    parameters:
      - in: path
        name: projectId
        schema:
          type: string
        required: true
        description: Unique ID of the project item which should be updated
    produces:
      - application/json
    requestBody:
      description: Creates a new project item. If other parameters from the project model are provided, they will be overwritten
      required: true,
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: Title of the project item.
                example: "Wash the dishes"
              description:
                type: string
                description: A description of the project item.
                example: "Clean up the dishes left from yesterday evening"
              followup:
                type: date
                description: Moment.js timestamp of when project item should be reviewed.
                example: "Moment<2020-12-21T13:01:42+01:00>"
              done:
                type: boolean
                description: Whether the project item is still valid or not
                example: "true"
    responses:
      200:
        description: Returns an `object` representing the updated project item
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      404:
        description: Returns an `object` describing that the project item was not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotFoundException"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalErrorException"
  delete:
    summary: Delete a single project item by its id
    operationId: handleDeleteProjectByProjectId
    tags: [Project]
    parameters:
      - in: path
        name: projectId
        schema:
          type: string
        required: true
        description: Unique ID of the project item which should be deleted
    produces:
      - application/json
    responses:
      204:
        description: Returns an empty `string` with status code 204 'no content'
      404:
        description: Returns an `object` describing that the project item was not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotFoundException"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalErrorException"
