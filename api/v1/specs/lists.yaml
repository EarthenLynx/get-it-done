# This document is used to describe the /lists path.
# It contains the data schema, as well as the endpoints
# It should be changed whenever the returned structure changes as well.
components:
  schemas:
    List:
      type: object
      properties:
        listId:
          type: string
          description: The auto-generated uuid of the list item.
          example: "879127udh12f23"
        title:
          type: string
          description: Title of the list item.
          example: "Household"
        description:
          type: string
          description: A description of the list item.
          example: "All tasks that are related to householdwork, like buying groceries, walk the dog, feed the fish, ..."

tags:
  name: List
  description: Secondary resource. A list item helps to categorize next actions and counters the idea of having only a single todo list.

# List endpoint: User ID path
/api/v1/list:
  get:
    security:
      - bearerAuth: []
    summary: Returns all maintained lists. The resulting array's items can be used to categorize actions.
    operationId: handleGetLists
    tags: [List]
    produces:
      - application/json
    responses:
      200:
        description: Returns an `array` of list items
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/List"
        links:
          Create / Update Action:
            description: The listId - value returned in the response can be used to categorize an action in `/action/{actionId}/`
            operationId: handleCreateAction
            parameters:
              listId: "879127udh12f23"
          Create / Update List:
            description: The listId - value returned in the response can be used to update a list in `/list/{listId}/`
            operationId: handleUpdateListByListId
            parameters:
              listId: "17821-d12f1-g345h6h-h45f34"
      401:
        description: This exception occurs in case the api token is not sent appropriately
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingAuthHeaders"
      403:
        description: This exception occurs in case the api token is malformed or expired
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notAuthorizedAction"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/serverError"
  post:
    security:
      - bearerAuth: []
    summary: Create a new list item.
    operationId: handleCreateList
    tags: [List]
    produces:
      - application/json
    consumes:
      - application/json
    requestBody:
      description: Allows a registered user to login using their user credentials `username` and `password`.
      required: true,
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/List"
        application/json:
          schema:
            $ref: "#/components/schemas/List"
    responses:
      200:
        description: Returns an `object` representing the created list item
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/List"
      400:
        description: This exception occurs if the login payload is missing
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingRequestBody"
      401:
        description: This exception occurs in case the api token is not sent appropriately
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingAuthHeaders"
      403:
        description: This exception occurs in case the api token is malformed or expired
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notAuthorizedAction"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/serverError"

# List endpoint: List ID path
/api/v1/list/{listId}:
  put:
    security:
      - bearerAuth: []
    summary: Update a single list item by its id
    operationId: handleUpdateListByListId
    tags: [List]
    parameters:
      - in: path
        name: listId
        schema:
          type: string
        required: true
        description: Unique ID of the list item which should be updated
    produces:
      - application/json
    requestBody:
      description: Updates a list item by its id
      required: true,
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: Title of the list item.
                example: "Household"
              description:
                type: string
                description: A description of the list item.
                example: "All tasks that are related to household, as well as to other things at home, like buying groceries, walk the dog, feed the fish, ..."
    responses:
      200:
        description: Returns an `object` showing the success message
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updated"
      400:
        description: This exception occurs if the login payload is missing
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingRequestBody"
      401:
        description: This exception occurs in case the api token is not sent appropriately
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingAuthHeaders"
      403:
        description: This exception occurs in case the api token is malformed or expired
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notAuthorizedAction"
      404:
        description: Returns an `object` describing that the list item was not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotFoundException"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/serverError"
  delete:
    security:
      - bearerAuth: []
    summary: Delete a single list item by its id
    operationId: handleDeleteListByListId
    tags: [List]
    parameters:
      - in: path
        name: listId
        schema:
          type: string
        required: true
        description: Unique ID of the list item which should be deleted
    produces:
      - application/json
    responses:
      200:
        description: Returns an `object` showing the success message
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleted"

      401:
        description: This exception occurs in case the api token is not sent appropriately
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingAuthHeaders"
      403:
        description: This exception occurs in case the api token is malformed or expired
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notAuthorizedAction"
      404:
        description: Returns an `object` describing that the list item was not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotFoundException"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/serverError"
