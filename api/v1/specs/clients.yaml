components:
  schemas:
    Client:
      type: object
      properties:
        clientId:
          type: string
          description: The auto-generated uuid of the client
          example: "198d2178f23h"
        clientName:
          type: string
          description: The full name of the client
          example: "Doe Corp"
        clientMail:
          type: string
          description: The email adress of the client
          example: "John@DoeCorp.com"

tags:
  name: Client
  description: Secondary resource. A client is an entity for which tasks are performed.

# Client endpoint:
/api/v1/client:
  get:
    security:
      - bearerAuth: []
    summary: Returns all maintained clients. The q - parameter can be used to refine the search.
    operationId: handleGetClients
    tags: [Client]
    parameters:
      - in: query
        name: q
        schema:
          type: string
        description: Queries the database for clientName which includes a substring of the query that's been passed
    produces:
      - application/json
    responses:
      200:
        description: Returns an `array` of clients
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Client"
        links:
          Assign a waiting item:
            description: The clientId - value returned in the response can be used to categorize a waiting item in `/waiting/{waitingId}`
            operationId: handleCreateWaiting
            parameters:
              "...": "..."
              clientId: "198d2178f23h"
      401:
        description: This exception occurs in case the api token is not sent appropriately
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingAuthHeaders"
      403:
        description: This exception occurs in case the api token is malformed or expired
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notAuthorizedAction"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/serverError"
  post:
    security:
      - bearerAuth: []
    summary: Create a new client. A client is an entity for which tasks are performed.
    operationId: handleCreateClient
    tags: [Client]
    consumes:
      - application/json
    produces:
      - application/json
    requestBody:
      description: Creates a new client item.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              clientName:
                type: string
                description: The full name of the client
                example: "John Doe"
              clientMail:
                type: string
                description: The email adress of the client
                example: "John@doe.com"
    responses:
      201:
        description: Returns an `object` representing the created client
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Client"
      400:
        description: This exception occurs if the login payload is missing
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingRequestBody"
      401:
        description: This exception occurs in case the api token is not sent appropriately
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingAuthHeaders"
      403:
        description: This exception occurs in case the api token is malformed or expired
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notAuthorizedAction"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/serverError"

# Client endpoint:
/api/v1/client/{clientId}:
  put:
    security:
      - bearerAuth: []
    summary: Updates a single client based on its ID.
    operationId: handleUpdateClientByClientId
    tags: [Client]
    parameters:
      - in: path
        name: clientId
        schema:
          type: string
        required: true
        description: Unique ID of the client for which the entry data should be updated
    consumes:
      - application/json
    produces:
      - application/json
    requestBody:
      description: Update an existing client item.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              clientName:
                type: string
                description: The full name of the client
                example: "John Doe"
              clientMail:
                type: string
                description: The email adress of the client
                example: "John@doe.com"
    responses:
      200:
        description: Returns an `object` showing the success message
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/updated"
      400:
        description: This exception occurs if the login payload is missing
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingRequestBody"
      401:
        description: This exception occurs in case the api token is not sent appropriately
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingAuthHeaders"
      403:
        description: This exception occurs in case the api token is malformed or expired
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notAuthorizedAction"
      404:
        description: Returns an `object` describing that the list item was not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotFoundException"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/serverError"
  delete:
    security:
      - bearerAuth: []
    summary: Deletes a single client based on its ID.
    operationId: handleDeleteClientByClientId
    tags: [Client]
    parameters:
      - in: path
        name: clientId
        schema:
          type: string
        required: true
        description: Unique ID of the client which should be deleted
    responses:
      200:
        description: Returns an `object` showing the success message
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/deleted"
      401:
        description: This exception occurs in case the api token is not sent appropriately
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/missingAuthHeaders"
      403:
        description: This exception occurs in case the api token is malformed or expired
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notAuthorizedAction"
      404:
        description: Returns an `object` describing that the list item was not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotFoundException"
      500:
        description: Returns an `object` describing the unexpected server error that occured
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/serverError"
